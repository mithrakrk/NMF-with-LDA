# -*- coding: utf-8 -*-
"""
Created on Thu Sep 27 18:08:37 2018

@author: Mithra

Had huge help from Adrien Guille and Pavel Soriano's code from github  for the 
LDA part. Link: https://github.com/AdrienGuille/TOM 

I tried not to directly lift the code, since this is mainly for my learning.
I did, however, use it for structuring the LDA part of the project.
"""
from scipy.sparse import coo_matrix
#from sklearn.decomposition import LatentDirichletAllocation as LDA
import lda
#import numpy as np

def infer_topics(train_tfidf, vocabulary_size, corpus_size, num_topics=10, return_model=False):
    lda_model = None
    topic_document = None
    lda_model = lda.LDA(n_topics=num_topics, n_iter=500)
    topic_document = lda_model.fit_transform(train_tfidf)
    topic_word_matrix = []
    document_topic_matrix = []
    
    row = []
    col = []
    data = []
    for topic_idx, topic in enumerate(lda_model.components_):
        for i in range(vocabulary_size):
            row.append(topic_idx)
            col.append(i)
            data.append(topic[i])
    topic_word_matrix = coo_matrix((data, (row, col)),shape=(num_topics, vocabulary_size)).tocsr()
    
    row = []
    col = []
    data = []
    doc_count = 0
    for doc in topic_document:
        topic_count = 0
        for topic_weight in doc:
            row.append(doc_count)
            col.append(topic_count)
            data.append(topic_weight)
            topic_count += 1
        doc_count += 1
    document_topic_matrix = coo_matrix((data, (row, col)),shape=(corpus_size, num_topics)).tocsr()
    if return_model:
        return topic_word_matrix,document_topic_matrix, lda_model
    else:
        return topic_word_matrix,document_topic_matrix
